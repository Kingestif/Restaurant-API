import { Category, Prisma } from "@prisma/client";
import { toMenu } from "../mapper/toMenuType";
import Menu from "../models/menu";
import prisma from "../prisma";
import { MenuType, MenuUpdateType } from "../types/menu";

export interface IMenuRepository {
    find(): Promise<MenuType[] | null>;
    create(menu: MenuType): Promise<MenuType>;
    findByIdAndUpdate(id: string, input: MenuUpdateType): Promise<MenuType | null>;
    findByIdAndDelete(id: string): Promise<null>;
}


export class MenuRepositoryMongo implements IMenuRepository {
    async find(): Promise<MenuType[] | null> {
        const menus = await Menu.find();
        return menus.map((menu:any)=> toMenu(menu));
    }

    async create(menu: MenuType): Promise<MenuType>{
        const  newMenu = await Menu.create({name: menu.name, description: menu.description, price: menu.price, category: menu.category, available: menu.available});
        return toMenu(newMenu);
    }

    async findByIdAndUpdate(id: string, input: MenuUpdateType): Promise<MenuType | null> {
        const editedMenu = await Menu.findByIdAndUpdate(id, input, {
            new: true,
            runValidators: true
        });

        if(!editedMenu) return null;

        return toMenu(editedMenu);
    }

    async findByIdAndDelete(id: string): Promise<null> {
        await Menu.findByIdAndDelete(id);
        return null;
    }
}

export class MenuRepositoryPrisma implements IMenuRepository {
    async find(): Promise<MenuType[] | null> {
        const menu = await prisma.menu.findMany();
        return menu.map((menu:any)=> toMenu(menu));
    }

    async create(menu: MenuType): Promise<MenuType>{
        const newMenu = await prisma.menu.create({
            data: {
                name: menu.name,
                description: menu.description,
                price: menu.price,
                category: menu.category as Category,
                available: menu.available
            }
        });
        return toMenu(newMenu);
    }

    async findByIdAndUpdate(id: string, input: MenuUpdateType): Promise<MenuType | null> {
        const updateData: Prisma.MenuUpdateInput = {};  // â¦¿ prisma autogenerated type (imported) used for updating models

        if(input.name !== undefined) updateData.name = input.name;
        if(input.description !== undefined) updateData.description = input.description;
        if(input.category) updateData.category = input.category as Category;
        if(input.available !== undefined) updateData.available = input.available;
        if(input.price !== undefined) updateData.price = new Prisma.Decimal(input.price);

        const editedMenu = await prisma.menu.update({
            where: {
                id: Number(id)
            },
            data: updateData
        });

        if(!editedMenu) return null;

        return toMenu(editedMenu);
    }

    async findByIdAndDelete(id: string): Promise<null> {
        const menuId = await prisma.menu.findUnique({where: {id: Number(id)}});
        await prisma.menu.delete({where: {id: Number(id)}});
        return null;
    }
}